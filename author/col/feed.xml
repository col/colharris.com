<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/author/col/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2020-06-29T14:18:01+00:00</updated>
  <id>/author/col/feed.xml</id>

  
  
  

  
    <title type="html">colharris.com | </title>
  

  
    <subtitle>Programming blog</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Jekyll Github Action</title>
      <link href="/jekyll-action" rel="alternate" type="text/html" title="Jekyll Github Action" />
      <published>2020-06-28T18:15:00+00:00</published>
      <updated>2020-06-28T18:15:00+00:00</updated>
      <id>/jekyll-action</id>
      <content type="html" xml:base="/jekyll-action">&lt;p&gt;Iâ€™ve realised that in order for the &lt;a href=&quot;./blog-editor-app&quot;&gt;Blog Editor&lt;/a&gt; to be useful I need to streamline the publishing process. Due to some 
plugins Iâ€™m using I need to run the build locally then manually push the generated static files to &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; 
branch.&lt;/p&gt;

&lt;p&gt;GitHub provides a lightweight CI system called GitHub Actions that should be able to run the build for each 
commit to master and push the static files to the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch automatically. Surprisingly I have not tried GitHub 
Actions yet so this is a good opportunity to try them out.&lt;/p&gt;

&lt;p&gt;I found this existing custom Jekyll Action &lt;a href=&quot;https://github.com/helaili/jekyll-action&quot;&gt;here&lt;/a&gt; that would do the job.&lt;/p&gt;

&lt;p&gt;Itâ€™s very simple to implement, just add the following config to &lt;code class=&quot;highlighter-rouge&quot;&gt;.github/workflows/github-pages.yml&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and deploy Jekyll site to GitHub Pages&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;github-pages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-16.04&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;helaili/jekyll-action@2.0.3&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;JEKYLL_PAT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${ { secrets.JEKYLL_PAT }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now all I need to do is push changes to the markdown files and itâ€™ll all get deployed automatically.&lt;/p&gt;

&lt;p&gt;My next problem is, how do I make a git commit from an iOS app? ðŸ¤”&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Colin Harris</name>
        
        
      </author>

      

      
        <category term="Tip" />
      
        <category term="Jekyll" />
      
        <category term="GitHub" />
      
        <category term="BlogEditor" />
      

      
        <summary type="html">Iâ€™ve realised that in order for the Blog Editor to be useful I need to streamline the publishing process. Due to some plugins Iâ€™m using I need to run the build locally then manually push the generated static files to gh-pages branch.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Project Idea: Blog Editor App</title>
      <link href="/blog-editor-app" rel="alternate" type="text/html" title="Project Idea: Blog Editor App" />
      <published>2020-06-23T17:30:00+00:00</published>
      <updated>2020-06-23T17:30:00+00:00</updated>
      <id>/blog-editor-app</id>
      <content type="html" xml:base="/blog-editor-app">&lt;p&gt;While setting up this blog last week I started looking around for a Markdown app I could use to manage the content. Iâ€™ve
been using &lt;a href=&quot;https://notable.app/&quot;&gt;Notable&lt;/a&gt; for awhile now to keep my own notes but due to some issues, such as the one I 
&lt;a href=&quot;https://github.com/notable/notable/issues/1192&quot;&gt;raised here&lt;/a&gt;, it doesnâ€™t work well for Jekyll content.&lt;/p&gt;

&lt;p&gt;Iâ€™ll be watching a few of the WWDC20 videos this week and, as a way to try out whatever I learn, I like to come up a 
relatively simple app idea I can work along the way. For WWDC18 I ended up creating a Harry Potter style 
Augmented Reality photo wall app to try out the ARKit framework. Iâ€™ll post about that another day.&lt;/p&gt;

&lt;p&gt;So for this year, I think Iâ€™ll try to create a simple, cross platform, Jekyll content editor using SwiftUI.&lt;/p&gt;

&lt;p&gt;Hereâ€™s some high level requirements for what Iâ€™m thinking.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple split view style layout with a list of posts in the sidebar&lt;/li&gt;
  &lt;li&gt;Clicking a post when open a plain text editor on the right to edit markdown&lt;/li&gt;
  &lt;li&gt;A preview button that will switch the text editor to a HTML view that renders the markdown&lt;/li&gt;
  &lt;li&gt;Ability to save changes and somehow sync with other devices&lt;/li&gt;
  &lt;li&gt;Support Jekyll metadata in the markdown content
    &lt;ul&gt;
      &lt;li&gt;Strip it out before displaying the content in the editor&lt;/li&gt;
      &lt;li&gt;Provide the ability to edit the metadata in a popup window&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Target platforms would be iPad and MacOS&lt;/li&gt;
  &lt;li&gt;Try to stick pure SwiftUI as much as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point this feels mostly achievable. Bring on WWDC20!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Colin Harris</name>
        
        
      </author>

      

      
        <category term="WWDC20" />
      
        <category term="SwiftUI" />
      
        <category term="BlogEditor" />
      

      
        <summary type="html">While setting up this blog last week I started looking around for a Markdown app I could use to manage the content. Iâ€™ve been using Notable for awhile now to keep my own notes but due to some issues, such as the one I raised here, it doesnâ€™t work well for Jekyll content.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Elixir local development config</title>
      <link href="/elixir-local-config" rel="alternate" type="text/html" title="Elixir local development config" />
      <published>2020-06-21T11:30:00+00:00</published>
      <updated>2020-06-21T11:30:00+00:00</updated>
      <id>/elixir-local-config</id>
      <content type="html" xml:base="/elixir-local-config">&lt;p&gt;When youâ€™re working in a team itâ€™s common for each developers setup to be a little different. A great way to deal with this in Elixir projects is to include an optional config file called &lt;code class=&quot;highlighter-rouge&quot;&gt;local.exs&lt;/code&gt;. This file should not be tracked in source control and can override any config each developer needs for their local machine.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/local.exs&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use Mix.Config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/dev.exs&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...

# Local, untracked config overrides.
if File.exists?(&quot;#{__DIR__}/local.exs&quot;) do
  import_config &quot;local.exs&quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Local, untracked config overrides.
config/local.exs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>Colin Harris</name>
        
        
      </author>

      

      
        <category term="Tips" />
      
        <category term="Elixir" />
      

      
        <summary type="html">When youâ€™re working in a team itâ€™s common for each developers setup to be a little different. A great way to deal with this in Elixir projects is to include an optional config file called local.exs. This file should not be tracked in source control and can override any config each developer needs for their local machine.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Why?</title>
      <link href="/why" rel="alternate" type="text/html" title="Why?" />
      <published>2020-06-20T11:30:00+00:00</published>
      <updated>2020-06-20T11:30:00+00:00</updated>
      <id>/why</id>
      <content type="html" xml:base="/why">&lt;p&gt;So why am I creating this blog?&lt;/p&gt;

&lt;p&gt;I donâ€™t plan on writing long step by step articles, and I donâ€™t plan on writing anything about my day job as a Tech 
Lead. Programming is my hobby as well as my job, and I want this blog to be a way for me to document what Iâ€™m tinkering 
with as part of that hobby.&lt;/p&gt;

&lt;p&gt;I have a long history of starting an endless stream of side projects that mostly never see the light of day. Iâ€™m hoping 
that forcing myself to post about them here it will help me consolidate those efforts and, if nothing else, provide something 
I can look back on.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Colin Harris</name>
        
        
      </author>

      

      
        <category term="General" />
      

      
        <summary type="html">So why am I creating this blog?</summary>
      

      
      
    </entry>
  
</feed>
